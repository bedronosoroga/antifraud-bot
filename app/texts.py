from __future__ import annotations

from app.config import cfg

_FILLED_BLOCK = "‚ñ∞"
_EMPTY_BLOCK = "‚ñ±"


def progress_bar(current: int, total: int, blocks: int = 5) -> str:
    """Draw a progress bar using filled and empty square blocks."""

    if blocks <= 0:
        return ""
    if total <= 0:
        return _EMPTY_BLOCK * blocks

    capped_total = total
    clamped_current = max(0, min(current, capped_total))

    if clamped_current == 0:
        filled_blocks = 0
    else:
        numerator = clamped_current * blocks
        filled_blocks = (numerator + capped_total - 1) // capped_total
        filled_blocks = max(1, filled_blocks)
    filled_blocks = min(filled_blocks, blocks)
    return _FILLED_BLOCK * filled_blocks + _EMPTY_BLOCK * (blocks - filled_blocks)


def hint_send_code() -> str:
    """Return the main screen prompt."""

    return "üîé –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (3‚Äì7 —Ü–∏—Ñ—Ä) ‚Äî –æ—Ç–≤–µ—Ç–∏–º —Å—Ä–∞–∑—É."


def history_empty() -> str:
    """Return the empty history message."""

    return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫."


def unlim_cap_reached() -> str:
    """
    Return a message for reaching the unlimited plan daily cap.

    >>> isinstance(unlim_cap_reached(), str)
    True
    """

    cap = getattr(cfg.plans.get("unlim", None), "daily_cap", None)
    if cap:
        return f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {cap}/—Å—É—Ç–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 00:00."
    return "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 00:00."


def _heuristic_metered_bar(left: int, blocks: int) -> str:
    """
    –†–∏—Å—É–µ–º –±–∞—Ä –ø–æ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É.

    >>> _heuristic_metered_bar(0, 5)
    '‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±'
    >>> _heuristic_metered_bar(100, 5)
    '‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞'
    """

    blocks = max(1, blocks)
    if left <= 0:
        filled = 0
    else:
        pct = max(0, min(left, 100)) / 100.0
        filled = max(1, min(blocks, int(round(pct * blocks))))
    return _FILLED_BLOCK * filled + _EMPTY_BLOCK * (blocks - filled)


def _plural(n: int, forms: tuple[str, str, str]) -> str:
    """
    –†—É—Å—Å–∫–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ —á–∏—Å–ª—É.
    forms = ("—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥") / ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
    """

    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19:
        return forms[2]
    if n1 == 1:
        return forms[0]
    if 2 <= n1 <= 4:
        return forms[1]
    return forms[2]


def status_line_metered(
    plan_title: str,
    left: int,
    expires_date: str,
    bar_blocks: int = 5,
    total: int | None = None,
) -> str:
    """
    Return the status line for metered plans with a progress bar.

    >>> "‚ñ∞" in status_line_metered("20", left=15, expires_date="24.11", total=20)
    True
    >>> "‚ñ±" in status_line_metered("20", left=0, expires_date="24.11")
    True
    >>> "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:" in status_line_metered("20", left=13, expires_date="24.11", total=20)
    True
    """

    left = max(0, int(left))
    bar: str
    if total and total > 0:
        total = int(total)
        remaining = min(left, total)
        used = max(0, total - remaining)
        bar = progress_bar(used, total, bar_blocks)
    else:
        bar = _heuristic_metered_bar(left, bar_blocks)
    return f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {left} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"


def status_line_unlim(today_used: int, cap: int, expires_date: str, bar_blocks: int = 5) -> str:
    """
    Return the status line for unlimited plans with a progress bar.

    >>> s = status_line_unlim(today_used=10, cap=50, expires_date="24.11")
    >>> "–¥–æ 50/—Å—É—Ç–∫–∏" in s and "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 24.11" in s
    True
    >>> s2 = status_line_unlim(today_used=10, cap=0, expires_date="24.11")
    >>> "0/—Å—É—Ç–∫–∏" in s2  # –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    False
    """

    safe_today = max(0, today_used)
    if cap and cap > 0:
        bar = progress_bar(safe_today, cap, bar_blocks)
        return (
            f"–ë–µ–∑–ª–∏–º–∏—Ç: –¥–æ {cap}/—Å—É—Ç–∫–∏ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {safe_today}/{cap} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"
        )
    bar = progress_bar(safe_today, 1, bar_blocks)
    return f"–ë–µ–∑–ª–∏–º–∏—Ç ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {safe_today} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"


def fmt_rub(amount: int) -> str:
    """Format an integer amount of rubles."""

    return f"{amount} ‚ÇΩ"


def bullet_list(items: list[str]) -> str:
    """Join items into a bullet list string."""

    filtered = [item.strip() for item in items if item and item.strip()]
    return "\n".join(f"‚Ä¢ {item}" for item in filtered)


def plans_list() -> str:
    """Return a short list of subscription plans."""

    lines = ["–ú–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã:"]
    plan_p20 = cfg.plans.get("p20")
    plan_p50 = cfg.plans.get("p50")
    plan_unlim = cfg.plans.get("unlim")

    if plan_p20 and plan_p20.checks_in_pack:
        lines.append(f"‚Ä¢ {plan_p20.checks_in_pack} ‚Äî {fmt_rub(plan_p20.price_rub)}")
    if plan_p50 and plan_p50.checks_in_pack:
        lines.append(f"‚Ä¢ {plan_p50.checks_in_pack} ‚Äî {fmt_rub(plan_p50.price_rub)}")
    if plan_unlim:
        caption = f"‚Ä¢ {plan_unlim.title} ‚Äî {fmt_rub(plan_unlim.price_rub)}"
        if plan_unlim.daily_cap:
            caption += f" (–¥–æ {plan_unlim.daily_cap}/—Å—É—Ç–∫–∏)"
        lines.append(caption)

    return "\n".join(lines)


def paywall_no_checks() -> str:
    """Return the paywall text when no checks remain."""

    return "–ü—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.\n\n" + plans_list()


def payment_success(expires_date: str, extra_tail: str = "") -> str:
    """Return the payment success message."""

    base = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úî –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expires_date}. –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω."
    if extra_tail:
        base = f"{base}\n{extra_tail}"
    return base


def payment_incomplete() -> str:
    """Return the payment incomplete message."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ–º?"


def payment_timeout() -> str:
    """Return the payment timeout message."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."


def free_pack_status(left: int, until: str) -> str:
    """Return the free pack status line."""

    return f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å: {left} ‚Ä¢ –î–æ: {until}"


def ref_promo_short() -> str:
    """Return a short referral promo block."""

    return (
        "–•–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –º–µ–Ω—å—à–µ? –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –¥–æ 50% –æ—Ç –µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫.\n"
        "[–ú–æ—è —Å—Å—ã–ª–∫–∞]  [–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç]"
    )


def company_ati_ask() -> str:
    """Ask the user to provide their company ATI code."""

    return (
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úî\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ê–¢–ò –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (3‚Äì7 —Ü–∏—Ñ—Ä).\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )


def company_ati_why() -> str:
    """Explain why the ATI code is requested."""

    return (
        "–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–¥ –ê–¢–ò –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –º—ã. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )


def company_ati_saved(ati: str) -> str:
    """Confirm that the company ATI code has been saved."""

    return (
        f"–ì–æ—Ç–æ–≤–æ, –∫–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {ati}. –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏."
    )


def company_ati_later() -> str:
    """Acknowledge that the user will provide the ATI code later."""

    return "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω–∏–º –ø–æ–∑–∂–µ. –£–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏."


def err_need_digits_3_7() -> str:
    """Return an error message when the ATI code length is invalid."""

    return "–ù—É–∂–Ω–æ –æ—Ç 3 –¥–æ 7 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."


def report_a(ati: str, lin: int, exp: int, tail: str) -> str:
    """Return the green report variant."""

    return (
        f"üü¢ –ö–æ–¥ –ê–¢–ò {ati} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: —Ä–∏—Å–∫ –Ω–µ –≤—ã—è–≤–ª–µ–Ω\n\n"
        f"{tail}"
    )


def report_b(ati: str, lin: int, exp: int) -> str:
    """Return the yellow report with elevated risk."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–µ–º —Ä–µ–µ—Å—Ç—Ä–µ –ø—Ä–æ–≤–µ—Ä–æ–∫.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: ‚ÅâÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫\n\n"
        "–ü–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –µ—Å—Ç—å —Ä–∏—Å–∫–∏. –û—Ü–µ–Ω–∫–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ "
        "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
    )


def report_c(ati: str, lin: int, exp: int) -> str:
    """Return the yellow report variant with scarce data."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: –Ω–µ –≤—ã—è–≤–ª–µ–Ω —Ä–∏—Å–∫\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ —Ä–µ–µ—Å—Ç—Ä–∞–º –º–∞–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç."
    )


def report_d(ati: str, lin: int, exp: int) -> str:
    """Return the red report variant with critical risk."""

    return (
        f"üî¥ –ö–æ–¥ –ê–¢–ò {ati} –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: ‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫\n\n"
        "–ü–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –µ—Å—Ç—å —Ä–∏—Å–∫–∏. –û—Ü–µ–Ω–∫–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ "
        "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
    )


def report_e(ati: str) -> str:
    """Return the yellow report variant for unknown codes."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–∏—Ö —Ä–µ–µ—Å—Ç—Ä–∞—Ö.\n\n"
        "üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: 0\n"
        "üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: 0\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: –Ω–µ –≤—ã—è–≤–ª–µ–Ω —Ä–∏—Å–∫\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ —Ä–µ–µ—Å—Ç—Ä–∞–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç."
    )


ACTION_BTN_CHECK = "–ï—â—ë –ø—Ä–æ–≤–µ—Ä–∫–∞"
ACTION_BTN_HISTORY = "–ò—Å—Ç–æ—Ä–∏—è"
ACTION_BTN_MENU = "–í –º–µ–Ω—é"

BTN_BUY_P20 = "–ö—É–ø–∏—Ç—å 20"
BTN_BUY_P50 = "–ö—É–ø–∏—Ç—å 50"
BTN_BUY_UNLIM = "–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç"

BTN_SUPPORT = "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"
BTN_PAY_SUPPORT = "–í –ø–æ–¥–¥–µ—Ä–∂–∫—É"
BTN_REPEAT_PAYMENT = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
BTN_CHOOSE_ANOTHER_PLAN = "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω"

BTN_MY_REF_LINK = "–ú–æ—è —Å—Å—ã–ª–∫–∞"
BTN_HOW_IT_WORKS = "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"

BTN_BACK = "–ù–∞–∑–∞–¥"
# –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
BTN_MENU = ACTION_BTN_MENU
BTN_MORE = "–î–∞–ª—å—à–µ"

BTN_REF_COPY = "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
BTN_REF_SHARE = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
BTN_REF_SPEND_20 = "–ö—É–ø–∏—Ç—å 20 –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_SPEND_50 = "–ö—É–ø–∏—Ç—å 50 –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_SPEND_UNLIM = "–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_WITHDRAW = "–í—ã–≤–æ–¥"

BTN_FAQ = "FAQ"

BTN_WHY_ASK = "–ü–æ—á–µ–º—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º?"
BTN_SET_LATER = "–£–∫–∞–∑–∞—Ç—å –ø–æ–∑–∂–µ"
BTN_SET_NOW = "–£–∫–∞–∑–∞—Ç—å"
BTN_CHANGE_CODE = "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥"
BTN_CHECK_THIS_CODE = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥"


def ref_header() -> str:
    """Return the referral section header."""

    return "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å"


def ref_link_block(link: str) -> str:
    """Return the referral link block."""

    return f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º."


def ref_level_block(level: int, percent: int, to_next: int | None) -> str:
    """Return the referral level block."""

    base = f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level} ‚Ä¢ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {percent}%"
    if to_next is not None:
        base = f"{base}\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {to_next} –æ–ø–ª–∞—Ç"
    return base


def ref_earnings_block(accrued_rub: int, pending_rub: int) -> str:
    """Return the referral earnings block."""

    return f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: {fmt_rub(accrued_rub)} ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {fmt_rub(pending_rub)}"


def ref_spend_withdraw_block() -> str:
    """Return the referral spend/withdraw block."""

    return (
        "–ö—É–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:\n"
        "‚Äî –ö—É–ø–∏—Ç—å 20 –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Äî –ö—É–ø–∏—Ç—å 50 –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Äî –ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"
    )


def ref_how_it_works() -> str:
    """Return the referral how-it-works explanation."""

    steps = [
        "–î–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π.",
        "–î—Ä—É–≥ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.",
        "–ú—ã –Ω–∞—á–∏—Å–ª—è–µ–º % –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
        "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞).",
        "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å—Ç—ë—Ç –ø–æ –º–µ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç –≤–∞—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.",
    ]
    return "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n" + bullet_list(steps)


def ref_levels_table() -> str:
    """Return the referral levels table."""

    levels = [
        "0‚Äì2 –æ–ø–ª–∞—Ç ‚Äî 10%",
        "3‚Äì9 ‚Äî 20%",
        "10‚Äì24 ‚Äî 30%",
        "25‚Äì49 ‚Äî 40%",
        "‚â•50 ‚Äî 50%",
    ]
    return "–£—Ä–æ–≤–Ω–∏:\n" + bullet_list(levels)


def ref_balance_only_here_notice() -> str:
    """–ê–ª–∏–∞—Å –¥–ª—è notice –æ–± –æ–ø–ª–∞—Ç–µ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ."""

    return wallet_only_in_referral_notice()


def history_header() -> str:
    """Return the history section header."""

    return "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫"


def history_item_line(status_emoji: str, ati: str, dt: str) -> str:
    """Return a formatted history item line."""

    return f"{status_emoji} {ati} ‚Ä¢ {dt}"


def history_no_more() -> str:
    """Return the history end marker."""

    return "–≠—Ç–æ –≤—Å—ë –Ω–∞ —Å–µ–π—á–∞—Å."


def history_empty_hint() -> str:
    """Return the empty history hint message."""

    return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫.\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (3‚Äì7 —Ü–∏—Ñ—Ä) ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–∞–∑—É."


def help_main() -> str:
    """Return the help section header."""

    return "–ü–æ–º–æ—â—å"


def faq_text() -> str:
    """
    Return the FAQ text.

    >>> t = faq_text()
    >>> "(" in t and ")" in t  # –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–±–æ—á–Ω—ã–π TZ –∏–∑ cfg.tz
    True
    """

    qa_items = [
        "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É? ‚Äî –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (3‚Äì7 —Ü–∏—Ñ—Ä) –≤ —á–∞—Ç, –∏ –º—ã —Å—Ä–∞–∑—É –¥–∞–¥–∏–º –æ—Ç—á—ë—Ç.",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å? ‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–ª–∞–Ω. –í—Å—ë –∑–∞–Ω–∏–º–∞–µ—Ç –º–∏–Ω—É—Ç—É.",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏? ‚Äî –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–¥–∞—ë—Ç—Å—è 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ 3 –¥–Ω—è.",
        f"–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç? ‚Äî –î–æ 50 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å—É—Ç–∫–∏, —Å—á—ë—Ç—á–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è –≤ 00:00 ({cfg.tz}).",
        "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞? ‚Äî –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª.",
        "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏? ‚Äî –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏.",
    ]
    return "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:\n" + bullet_list(qa_items)


def support_pretext() -> str:
    """Return the pre-support message."""

    return "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."


def nudge_enter_code() -> str:
    """Return a simple reminder to enter an ATI code."""

    return "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –ê–¢–ò ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–∞–∑—É."


def free_expiring_24h(left: int, until: str) -> str:
    """Return a reminder about expiring free checks."""

    return f"–ï—â—ë –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {left}. –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {until}. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ–π—á–∞—Å."


def free_low_left(left: int) -> str:
    """Return a reminder when few free checks remain."""

    return f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å: {left}. –£—Å–ø–µ–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."


def payment_abandoned() -> str:
    """Return a reminder about an unfinished payment."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å?"


def inactive_with_active_subscription(days: int) -> str:
    """Return a reminder about inactivity with an active subscription."""

    return (
        "–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ "
        f"{days} {_plural(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))} –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º."
    )


def winback_no_activity(days: int) -> str:
    """Return a winback message when there is no activity."""

    head = (
        "–î–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ ("
        f"{days} {_plural(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}). –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–ª–∞–Ω—ã?"
    )
    return head + "\n" + plans_list()


def unlim_cap_hit_today(cap: int) -> str:
    """Return a notice about hitting the unlimited cap today."""

    return f"–õ–∏–º–∏—Ç {cap}/—Å—É—Ç–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 00:00."


def profile_overview_metered(plan_title: str, left: int, expires_date: str) -> str:
    """Return the profile overview for metered plans."""

    return f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title}\n–û—Å—Ç–∞–ª–æ—Å—å: {left}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}"


def profile_overview_unlim(today_used: int, cap: int, expires_date: str) -> str:
    """
    Return the profile overview for unlimited plans.

    >>> "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:" in profile_overview_unlim(today_used=5, cap=50, expires_date="24.11")
    True
    """

    cap_suffix = f" (–¥–æ {cap}/—Å—É—Ç–∫–∏)" if cap and cap > 0 else ""
    today_denominator = f"/{cap}" if cap and cap > 0 else ""
    safe_today = max(0, today_used)
    return (
        f"–ü–æ–¥–ø–∏—Å–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç{cap_suffix}\n"
        f"–°–µ–≥–æ–¥–Ω—è: {safe_today}{today_denominator}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}"
    )


def settings_menu(
    notif_payments: bool,
    notif_ref: bool,
    mask_history: bool,
    post_report_action: str,
) -> str:
    """Return the settings menu description."""

    def _on_off(value: bool) -> str:
        return "–≤–∫–ª" if value else "–≤—ã–∫–ª"

    action_map = {
        "check": "–ï—â—ë –ø—Ä–æ–≤–µ—Ä–∫–∞",
        "menu": "–í –º–µ–Ω—é",
        ACTION_BTN_CHECK: "–ï—â—ë –ø—Ä–æ–≤–µ—Ä–∫–∞",
        ACTION_BTN_MENU: "–í –º–µ–Ω—é",
    }
    action = action_map.get(post_report_action, post_report_action)

    items = [
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–∞—Ö: {_on_off(notif_payments)}",
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö: {_on_off(notif_ref)}",
        f"–ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏: {_on_off(mask_history)}",
        f"–ü–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {action}",
    ]
    return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n" + bullet_list(items)


def settings_changed_ok() -> str:
    """Return the confirmation for updated settings."""

    return "–ì–æ—Ç–æ–≤–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."


def company_ati_banner_not_set() -> str:
    """Return the banner shown when company ATI code is missing."""

    return "–ö–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω. [–£–∫–∞–∑–∞—Ç—å]"


def company_ati_change_confirm(new_code: str) -> str:
    """Return the confirmation prompt for changing the ATI code."""

    return f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –Ω–∞ {new_code}?"


def invalid_input_non_digits() -> str:
    """Return an error when the input is not digits."""

    return "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä."


def too_many_requests() -> str:
    """Return a rate limiting warning."""

    return "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."


def throttle_msg(seconds: int) -> str:
    """
    Return a throttling message with seconds to wait.

    >>> throttle_msg(1).startswith("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1")
    True
    """

    return (
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ "
        f"{seconds} {_plural(seconds, ('—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'))} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π."
    )


def payment_failed_try_again() -> str:
    """Return a payment failure message."""

    return "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."


def refund_processed() -> str:
    """Return the refund processed message."""

    return "–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°—Ä–æ–∫ –∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã."


def wallet_only_in_referral_notice() -> str:
    """Return the notice about wallet payments availability."""

    return "–û–ø–ª–∞—Ç–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª."


__all__ = [
    "progress_bar",
    "hint_send_code",
    "history_empty",
    "unlim_cap_reached",
    "status_line_metered",
    "status_line_unlim",
    "fmt_rub",
    "bullet_list",
    "plans_list",
    "paywall_no_checks",
    "payment_success",
    "payment_incomplete",
    "payment_timeout",
    "free_pack_status",
    "ref_promo_short",
    "company_ati_ask",
    "company_ati_why",
    "company_ati_saved",
    "company_ati_later",
    "err_need_digits_3_7",
    "report_a",
    "report_b",
    "report_c",
    "report_d",
    "report_e",
    "ACTION_BTN_CHECK",
    "ACTION_BTN_HISTORY",
    "ACTION_BTN_MENU",
    "BTN_BUY_P20",
    "BTN_BUY_P50",
    "BTN_BUY_UNLIM",
    "BTN_SUPPORT",
    "BTN_PAY_SUPPORT",
    "BTN_REPEAT_PAYMENT",
    "BTN_CHOOSE_ANOTHER_PLAN",
    "BTN_MY_REF_LINK",
    "BTN_HOW_IT_WORKS",
    "BTN_BACK",
    "BTN_MENU",
    "BTN_MORE",
    "BTN_REF_COPY",
    "BTN_REF_SHARE",
    "BTN_REF_SPEND_20",
    "BTN_REF_SPEND_50",
    "BTN_REF_SPEND_UNLIM",
    "BTN_REF_WITHDRAW",
    "BTN_FAQ",
    "BTN_WHY_ASK",
    "BTN_SET_LATER",
    "BTN_SET_NOW",
    "BTN_CHANGE_CODE",
    "BTN_CHECK_THIS_CODE",
    "ref_header",
    "ref_link_block",
    "ref_level_block",
    "ref_earnings_block",
    "ref_spend_withdraw_block",
    "ref_how_it_works",
    "ref_levels_table",
    "ref_balance_only_here_notice",
    "history_header",
    "history_item_line",
    "history_no_more",
    "history_empty_hint",
    "help_main",
    "faq_text",
    "support_pretext",
    "nudge_enter_code",
    "free_expiring_24h",
    "free_low_left",
    "payment_abandoned",
    "inactive_with_active_subscription",
    "winback_no_activity",
    "unlim_cap_hit_today",
    "profile_overview_metered",
    "profile_overview_unlim",
    "settings_menu",
    "settings_changed_ok",
    "company_ati_banner_not_set",
    "company_ati_change_confirm",
    "invalid_input_non_digits",
    "too_many_requests",
    "throttle_msg",
    "payment_failed_try_again",
    "refund_processed",
    "wallet_only_in_referral_notice",
]
# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è –∏ –∞–≤—Ç–æ-–ø–æ–¥—Å–∫–∞–∑–æ–∫ IDE.
