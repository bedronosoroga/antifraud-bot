from __future__ import annotations

from app.config import cfg


def _plural(n: int, one: str, few: str, many: str) -> str:
    """
    –†—É—Å—Å–∫–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è: "1 –¥–µ–Ω—å / 2 –¥–Ω—è / 5 –¥–Ω–µ–π", —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö —Å–ª–æ–≤.
    """

    n_abs = abs(n)
    if 11 <= n_abs % 100 <= 14:
        return many
    tail = n_abs % 10
    if tail == 1:
        return one
    if tail in {2, 3, 4}:
        return few
    return many


def fmt_rub(amount: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '299 ‚ÇΩ' –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á.
    """

    return f"{amount} ‚ÇΩ"


def bullet_list(items: list[str]) -> str:
    """
    –°–∫–ª–µ–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å '‚Ä¢ '. –ü—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """

    filtered = [item for item in items if item and item.strip()]
    return "\n".join(f"‚Ä¢ {line}" for line in filtered)


def fmt_percent(numerator: int, denominator: int) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª—ã—Ö.
    –ü—Ä–∏–º–µ—Ä—ã:
    >>> fmt_percent(0, 20)
    '0%'
    >>> fmt_percent(3, 20)
    '15%'
    >>> fmt_percent(20, 20)
    '100%'
    """

    if denominator <= 0:
        return "0%"
    numerator = max(numerator, 0)
    if numerator == 0:
        return "0%"
    percent = round(100 * numerator / denominator)
    return f"{percent}%"


def progress_bar(used: int, total: int, blocks: int = 5) -> str:
    """
    –†–∏—Å—É–µ—Ç –±–∞—Ä ‚ñ∞/‚ñ± –ø–æ —Ñ–∞–∫—Ç—É used/total.
    - total <= 0 -> —Å—á–∏—Ç–∞–µ–º total = 1, used = min(used, 1)
    - used < 0 -> 0; used > total -> total
    –í—Å–µ–≥–¥–∞ 0..blocks –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö ‚ñ∞.
    –ü—Ä–∏–º–µ—Ä—ã:
    >>> progress_bar(0, 20, 5)
    '‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±'
    >>> progress_bar(10, 20, 5)
    '‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±'
    >>> progress_bar(20, 20, 5)
    '‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞'
    """

    if blocks <= 0:
        raise ValueError("blocks must be positive")
    if total <= 0:
        total = 1
        used = min(used, 1)
    used = max(0, min(used, total))
    if used == 0:
        filled = 0
    else:
        filled = -(-used * blocks // total)
    filled = min(filled, blocks)
    empty = blocks - filled
    return "‚ñ∞" * filled + "‚ñ±" * empty


# –î–µ–π—Å—Ç–≤–∏—è
ACTION_BTN_CHECK = "–ï—â—ë –ø—Ä–æ–≤–µ—Ä–∫–∞"
ACTION_BTN_HISTORY = "–ò—Å—Ç–æ—Ä–∏—è"
ACTION_BTN_MENU = "–í –º–µ–Ω—é"

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
BTN_BACK = "–ù–∞–∑–∞–¥"
BTN_MENU = ACTION_BTN_MENU
BTN_MORE = "–î–∞–ª—å—à–µ"

# –ü–æ–∫—É–ø–∫–∞/–æ–ø–ª–∞—Ç–∞
BTN_BUY_P20 = "–ö—É–ø–∏—Ç—å 20"
BTN_BUY_P50 = "–ö—É–ø–∏—Ç—å 50"
BTN_BUY_UNLIM = "–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç"
BTN_REPEAT_PAYMENT = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
BTN_CHOOSE_ANOTHER_PLAN = "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω"
BTN_PAY_SUPPORT = "–í –ø–æ–¥–¥–µ—Ä–∂–∫—É"

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞/FAQ
BTN_SUPPORT = "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"
BTN_FAQ = "FAQ"

# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
BTN_MY_REF_LINK = "–ú–æ—è —Å—Å—ã–ª–∫–∞"
BTN_HOW_IT_WORKS = "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
BTN_REF_COPY = "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
BTN_REF_SHARE = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
BTN_REF_SPEND_20 = "–ö—É–ø–∏—Ç—å 20 –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_SPEND_50 = "–ö—É–ø–∏—Ç—å 50 –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_SPEND_UNLIM = "–ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç –∏–∑ –±–∞–ª–∞–Ω—Å–∞"
BTN_REF_WITHDRAW = "–í—ã–≤–æ–¥"

# –ö–æ–º–ø–∞–Ω–∏—è –ê–¢–ò
BTN_WHY_ASK = "–ü–æ—á–µ–º—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º?"
BTN_SET_LATER = "–£–∫–∞–∑–∞—Ç—å –ø–æ–∑–∂–µ"
BTN_SET_NOW = "–£–∫–∞–∑–∞—Ç—å"
BTN_CHANGE_CODE = "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥"
BTN_CHECK_THIS_CODE = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥"


def hint_send_code() -> str:
    """–ì–ª–∞–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞."""

    return "üîé –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (–¥–æ 7 —Ü–∏—Ñ—Ä) ‚Äî –æ—Ç–≤–µ—Ç–∏–º —Å—Ä–∞–∑—É."


def invalid_input_non_digits() -> str:
    """–°–æ–æ–±—â–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."""

    return "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä."


def err_need_digits_3_7() -> str:
    """–°–æ–æ–±—â–∞–µ—Ç –æ –Ω–µ–≤–µ—Ä–Ω–æ–π –¥–ª–∏–Ω–µ –∫–æ–¥–∞."""

    return "–ù—É–∂–Ω–æ –¥–æ 7 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."


def too_many_requests() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""

    return "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."


def throttle_msg(seconds: int) -> str:
    """–° —É—á—ë—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è."""

    unit = _plural(seconds, "—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥")
    return f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds} {unit} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π."


def plans_list() -> str:
    """
    –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ø–æ cfg.plans: p20(299), p50(469), unlim(799, cap).
    –§–æ—Ä–º–∞—Ç: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n‚Ä¢ 20 –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî 299 ‚ÇΩ/–º–µ—Å\n...'
    """

    plan_p20 = cfg.plans.get("p20")
    plan_p50 = cfg.plans.get("p50")
    plan_unlim = cfg.plans.get("unlim")

    lines: list[str] = []
    if plan_p20 is not None:
        lines.append(f"20 –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî {fmt_rub(plan_p20.price_rub)}/–º–µ—Å")
    if plan_p50 is not None:
        lines.append(f"50 –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî {fmt_rub(plan_p50.price_rub)}/–º–µ—Å")
    if plan_unlim is not None:
        cap_suffix = f" (–¥–æ {plan_unlim.daily_cap} –≤ —Å—É—Ç–∫–∏)" if plan_unlim.daily_cap else ""
        lines.append(f"–ë–µ–∑–ª–∏–º–∏—Ç ‚Äî {fmt_rub(plan_unlim.price_rub)}/–º–µ—Å{cap_suffix}")

    body = bullet_list(lines)
    return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n{body}" if body else "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:"


def paywall_no_checks() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω—É–ª–µ–≤–æ–º –æ—Å—Ç–∞—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–æ–∫."""

    return "–ü—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.\n\n" + plans_list()


def payment_success(expires_date: str, extra_tail: str = "") -> str:
    """
    '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úî –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}. –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.'
    –ï—Å–ª–∏ extra_tail –Ω–µ –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """

    base = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úî –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}. –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω."
    if extra_tail:
        return base + "\n" + extra_tail
    return base


def payment_incomplete() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ–º?"


def payment_timeout() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."


def payment_failed_try_again() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""

    return "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."


def refund_processed() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ."""

    return "–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°—Ä–æ–∫ –∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã."


def free_pack_status(left: int, until: str) -> str:
    """'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å: {left} ‚Ä¢ –î–æ: {until}'."""

    return f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å: {left} ‚Ä¢ –î–æ: {until}"


def nudge_enter_code() -> str:
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ê–¢–ò."""

    return "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –ê–¢–ò ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–∞–∑—É."


def free_expiring_24h(left: int, until: str) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""

    return f"–ï—â—ë –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {left}. –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {until}. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ–π—á–∞—Å."


def free_low_left(left: int) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞–ª–æ–º –æ—Å—Ç–∞—Ç–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""

    word = _plural(left, "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    return f"–û—Å—Ç–∞–ª–æ—Å—å: {left} {word}. –£—Å–ø–µ–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."


def payment_abandoned() -> str:
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ—à–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""

    return "–ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å?"


def inactive_with_active_subscription(days: int) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ."""

    unit = _plural(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
    return f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ {days} {unit} –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º."


def winback_no_activity(days: int) -> str:
    """–í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ—è."""

    unit = _plural(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
    return f"–î–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ ({days} {unit}). –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–ª–∞–Ω—ã?\n" + plans_list()


def unlim_cap_hit_today(cap: int) -> str:
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ–∑–ª–∏–º–∏—Ç–∞.
    cap <= 0 -> —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –±–µ–∑ '0/—Å—É—Ç–∫–∏'.
    """

    if cap > 0:
        return f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {cap} –≤ —Å—É—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –°—á—ë—Ç—á–∏–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞."
    return "–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –°—á—ë—Ç—á–∏–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞."


def status_line_metered_exact(
    plan_title: str,
    used: int,
    total: int,
    expires_date: str,
    bar_blocks: int = 5,
) -> str:
    """
    '–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {left}/{total} ({pct_left}) ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}'
    –≥–¥–µ left = max(0, total - used); pct_left = fmt_percent(left, total);
    bar = progress_bar(used_clamped, total_clamped, bar_blocks).
    Doctest:
    >>> s = status_line_metered_exact("50", used=10, total=50, expires_date="24.11")
    >>> "–û—Å—Ç–∞–ª–æ—Å—å: 40/50" in s and "(80%)" in s
    True
    """

    left = max(0, total - used)
    pct_left = fmt_percent(left, total)
    total_clamped = total if total > 0 else 0
    if total_clamped > 0:
        used_clamped = max(0, min(used, total_clamped))
    else:
        used_clamped = max(0, used)
    bar = progress_bar(used_clamped, total_clamped, bar_blocks)
    return (
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {left}/{total} ({pct_left}) ‚Ä¢ "
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"
    )


def profile_overview_metered_exact(plan_title: str, used: int, total: int, expires_date: str) -> str:
    """
    '–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title}\n–û—Å—Ç–∞–ª–æ—Å—å: {left}/{total} ({pct_left})\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}'
    """

    left = max(0, total - used)
    pct_left = fmt_percent(left, total)
    return (
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan_title}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {left}/{total} ({pct_left})\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}"
    )


def status_line_unlim(today_used: int, cap: int | None, expires_date: str, bar_blocks: int = 5) -> str:
    """
    –ü—Ä–∏ cap>0: '–ë–µ–∑–ª–∏–º–∏—Ç: –¥–æ {cap}/—Å—É—Ç–∫–∏ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_used}/{cap} ({pct}) ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}'
    –ü—Ä–∏ cap<=0/None: '–ë–µ–∑–ª–∏–º–∏—Ç ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_used} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}' (bar –ø–æ 1).
    Doctest:
    >>> "–°–µ–≥–æ–¥–Ω—è: 10/50 (20%)" in status_line_unlim(10, 50, "24.11")
    True
    >>> "0/—Å—É—Ç–∫–∏" in status_line_unlim(10, 0, "24.11")
    False
    """

    if cap and cap > 0:
        used_clamped = max(0, min(today_used, cap))
        pct = fmt_percent(used_clamped, cap)
        bar = progress_bar(used_clamped, cap, bar_blocks)
        return (
            f"–ë–µ–∑–ª–∏–º–∏—Ç: –¥–æ {cap}/—Å—É—Ç–∫–∏ ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {used_clamped}/{cap} ({pct}) ‚Ä¢ "
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"
        )
    used_clamped = max(0, today_used)
    bar = progress_bar(used_clamped, 1, bar_blocks)
    return f"–ë–µ–∑–ª–∏–º–∏—Ç ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {used_clamped} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}\n{bar}"


def profile_overview_unlim(today_used: int, cap: int | None, expires_date: str) -> str:
    """
    '–ü–æ–¥–ø–∏—Å–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç{cap_suffix}\n–°–µ–≥–æ–¥–Ω—è: {today_used}{den}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}'
    –≥–¥–µ cap_suffix = ' (–¥–æ {cap}/—Å—É—Ç–∫–∏)' –ø—Ä–∏ cap>0, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ; den = '/{cap}' –ø—Ä–∏ cap>0, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ.
    """

    if cap and cap > 0:
        cap_suffix = f" (–¥–æ {cap}/—Å—É—Ç–∫–∏)"
        denominator = f"/{cap}"
    else:
        cap_suffix = ""
        denominator = ""
    return (
        f"–ü–æ–¥–ø–∏—Å–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç{cap_suffix}\n"
        f"–°–µ–≥–æ–¥–Ω—è: {today_used}{denominator}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_date}"
    )


def ref_header() -> str:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""

    return "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å"


def ref_link_block(link: str) -> str:
    """–ë–ª–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π."""

    return f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º."


def ref_level_block(level: int, percent: int, to_next: int | None) -> str:
    """
    '–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level} ‚Ä¢ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {percent}%'
    –ï—Å–ª–∏ to_next –∑–∞–¥–∞–Ω: '–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {to_next} –æ–ø–ª–∞—Ç–∞/–æ–ø–ª–∞—Ç—ã/–æ–ø–ª–∞—Ç'
    """

    base = f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level} ‚Ä¢ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {percent}%"
    if to_next is None:
        return base
    word = _plural(to_next, "–æ–ø–ª–∞—Ç–∞", "–æ–ø–ª–∞—Ç—ã", "–æ–ø–ª–∞—Ç")
    return f"{base}\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {to_next} {word}"


def ref_earnings_block(accrued_rub: int, pending_rub: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."""

    return f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: {fmt_rub(accrued_rub)} ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {fmt_rub(pending_rub)}"


def ref_spend_withdraw_block() -> str:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞, –∫—É–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞."""

    return (
        "–ö—É–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:\n"
        "‚Äî –ö—É–ø–∏—Ç—å 20 –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Äî –ö—É–ø–∏—Ç—å 50 –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Äî –ö—É–ø–∏—Ç—å –ë–µ–∑–ª–∏–º–∏—Ç –∏–∑ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"
    )


def ref_how_it_works() -> str:
    """–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""

    hold = getattr(cfg, "ref_hold_days", 3)
    return (
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π.\n"
        "‚Ä¢ –î—Ä—É–≥ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.\n"
        f"‚Ä¢ –ú—ã –Ω–∞—á–∏—Å–ª—è–µ–º % –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å (–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hold} –¥–Ω.).\n"
        "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å—Ç—ë—Ç –ø–æ –º–µ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç –≤–∞—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö."
    )


def ref_levels_table() -> str:
    """–¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤."""

    return (
        "–£—Ä–æ–≤–Ω–∏:\n"
        "‚Ä¢ 0‚Äì2 –æ–ø–ª–∞—Ç ‚Äî 10%\n"
        "‚Ä¢ 3‚Äì9 ‚Äî 20%\n"
        "‚Ä¢ 10‚Äì24 ‚Äî 30%\n"
        "‚Ä¢ 25‚Äì49 ‚Äî 40%\n"
        "‚Ä¢ ‚â•50 ‚Äî 50%"
    )


def wallet_only_in_referral_notice() -> str:
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ."""

    return "–û–ø–ª–∞—Ç–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª."


def ref_balance_only_here_notice() -> str:
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""

    return wallet_only_in_referral_notice()


def company_ati_ask() -> str:
    """–ó–∞–ø—Ä–æ—Å —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏."""

    return (
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úî\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ê–¢–ò –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–æ 7 —Ü–∏—Ñ—Ä).\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )


def company_ati_why() -> str:
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∑–∞—á–µ–º –Ω—É–∂–µ–Ω –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏."""

    return (
        "–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–¥ –ê–¢–ò –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –º—ã. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )


def company_ati_saved(ati: str) -> str:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""

    return f"–ì–æ—Ç–æ–≤–æ, –∫–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {ati}. –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏."


def company_ati_later() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∫–æ–¥ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–∑–∂–µ."""

    return "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω–∏–º –ø–æ–∑–∂–µ. –£–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏."


def company_ati_banner_not_set() -> str:
    """–ë–∞–Ω–Ω–µ—Ä –æ —Ç–æ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω."""

    return "–ö–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω. [–£–∫–∞–∑–∞—Ç—å]"


def company_ati_change_confirm(new_code: str) -> str:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""

    return f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –Ω–∞ {new_code}?"


def history_header() -> str:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫."""

    return "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫"


def history_item_line(status_emoji: str, ati: str, dt: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏."""

    return f"{status_emoji} {ati} ‚Ä¢ {dt}"


def history_no_more() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""

    return "–≠—Ç–æ –≤—Å—ë –Ω–∞ —Å–µ–π—á–∞—Å."


def history_empty() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""

    return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫."


def history_empty_hint() -> str:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""

    return "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫.\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (–¥–æ 7 —Ü–∏—Ñ—Ä) ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ä–∞–∑—É."


def help_main() -> str:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏."""

    return "–ü–æ–º–æ—â—å"


def faq_text() -> str:
    """–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""

    tz = getattr(cfg, "tz", "Europe/Moscow")
    return (
        "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:\n"
        "‚Ä¢ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É? ‚Äî –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ê–¢–ò (–¥–æ 7 —Ü–∏—Ñ—Ä) –≤ —á–∞—Ç, –∏ –º—ã —Å—Ä–∞–∑—É –¥–∞–¥–∏–º –æ—Ç—á—ë—Ç.\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å? ‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–ª–∞–Ω. –í—Å—ë –∑–∞–Ω–∏–º–∞–µ—Ç –º–∏–Ω—É—Ç—É.\n"
        "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏? ‚Äî –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–¥–∞—ë—Ç—Å—è 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ 3 –¥–Ω—è.\n"
        f"‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç? ‚Äî –î–æ 50 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å—É—Ç–∫–∏, —Å—á—ë—Ç—á–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è –≤ 00:00 ({tz}).\n"
        "‚Ä¢ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞? ‚Äî –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª.\n"
        "‚Ä¢ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ê–¢–ò –∫–æ–º–ø–∞–Ω–∏–∏? ‚Äî –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏."
    )


def support_pretext() -> str:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

    return "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."


def report_a(ati: str, lin: int, exp: int, tail: str) -> str:
    """–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""

    return (
        f"üü¢ –ö–æ–¥ –ê–¢–ò {ati} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: —Ä–∏—Å–∫ –Ω–µ –≤—ã—è–≤–ª–µ–Ω \n\n"
        f"{tail}"
    )


def report_b(ati: str, lin: int, exp: int) -> str:
    """–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–µ–º —Ä–µ–µ—Å—Ç—Ä–µ –ø—Ä–æ–≤–µ—Ä–æ–∫.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: ‚ÅâÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫\n\n"
        "–ü–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –µ—Å—Ç—å —Ä–∏—Å–∫–∏. –û—Ü–µ–Ω–∫–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
    )


def report_c(ati: str, lin: int, exp: int) -> str:
    """–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: –Ω–µ –≤—ã—è–≤–ª–µ–Ω —Ä–∏—Å–∫\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ —Ä–µ–µ—Å—Ç—Ä–∞–º –º–∞–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç."
    )


def report_d(ati: str, lin: int, exp: int) -> str:
    """–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–∏—Å–∫–æ–º."""

    return (
        f"üî¥ –ö–æ–¥ –ê–¢–ò {ati} –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        f"üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: {lin}\n"
        f"üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {exp}\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: ‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ \n\n"
        "–ü–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –µ—Å—Ç—å —Ä–∏—Å–∫–∏. –û—Ü–µ–Ω–∫–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
    )


def report_e(ati: str) -> str:
    """–û–±—â–∏–π –æ—Ç—á—ë—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""

    return (
        f"üü° –ö–æ–¥ –ê–¢–ò {ati} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–∏—Ö —Ä–µ–µ—Å—Ç—Ä–∞—Ö.\n\n"
        "üìà –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: 0\n"
        "üìà –ò–Ω–¥–µ–∫—Å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: 0\n\n"
        "üõ° –ß—ë—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏: –Ω–µ –≤—ã—è–≤–ª–µ–Ω —Ä–∏—Å–∫\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ —Ä–µ–µ—Å—Ç—Ä–∞–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–µ–≥–∞—Ç–∏–≤, –Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç."
    )


__all__ = [
    # helpers
    "progress_bar", "fmt_rub", "bullet_list", "fmt_percent",
    # buttons
    "ACTION_BTN_CHECK", "ACTION_BTN_HISTORY", "ACTION_BTN_MENU",
    "BTN_BACK", "BTN_MENU", "BTN_MORE",
    "BTN_BUY_P20", "BTN_BUY_P50", "BTN_BUY_UNLIM",
    "BTN_REPEAT_PAYMENT", "BTN_CHOOSE_ANOTHER_PLAN",
    "BTN_PAY_SUPPORT", "BTN_SUPPORT", "BTN_FAQ",
    "BTN_MY_REF_LINK", "BTN_HOW_IT_WORKS",
    "BTN_REF_COPY", "BTN_REF_SHARE",
    "BTN_REF_SPEND_20", "BTN_REF_SPEND_50", "BTN_REF_SPEND_UNLIM", "BTN_REF_WITHDRAW",
    "BTN_WHY_ASK", "BTN_SET_LATER", "BTN_SET_NOW", "BTN_CHANGE_CODE", "BTN_CHECK_THIS_CODE",
    # basics/errors
    "hint_send_code", "invalid_input_non_digits", "err_need_digits_3_7",
    "too_many_requests", "throttle_msg",
    # plans/payments
    "plans_list", "paywall_no_checks", "payment_success",
    "payment_incomplete", "payment_timeout", "payment_failed_try_again", "refund_processed",
    # free/reactivation
    "free_pack_status", "nudge_enter_code", "free_expiring_24h",
    "free_low_left", "payment_abandoned", "inactive_with_active_subscription",
    "winback_no_activity", "unlim_cap_hit_today",
    # status/profile
    "status_line_metered_exact", "profile_overview_metered_exact",
    "status_line_unlim", "profile_overview_unlim",
    # referral
    "ref_header", "ref_link_block", "ref_level_block", "ref_earnings_block",
    "ref_spend_withdraw_block", "ref_how_it_works", "ref_levels_table",
    "wallet_only_in_referral_notice", "ref_balance_only_here_notice",
    # company ati
    "company_ati_ask", "company_ati_why", "company_ati_saved",
    "company_ati_later", "company_ati_banner_not_set", "company_ati_change_confirm",
    # history/help
    "history_header", "history_item_line", "history_no_more", "history_empty", "history_empty_hint",
    "help_main", "faq_text", "support_pretext",
    # reports
    "report_a", "report_b", "report_c", "report_d", "report_e",
]
